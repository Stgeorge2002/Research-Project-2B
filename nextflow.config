// Nextflow config file

// Pipeline parameters
params {
    // Common parameters
    search_term = 'acetyltransferase'
    outputDir = params.outputDir ?: System.getenv('PANGENOME_OUTPUT_DIR') ?: "${launchDir}/results"
    nonMutatedDir = "${params.outputDir}/non_mutated"
    mutatedDir = "${params.outputDir}/mutated"
    keyword = params.search_term
    secondStageKeyword = params.search_term

    // Core mutation parameters
    inputFile = "$projectDir/input_urls.txt"
    num_genes_to_mutate = 10
    mutation_keyword = params.search_term
    mutation_mode = 'mutate'
    useLocalFiles = true
    localFilePath = "$launchDir/local_genomes"
    coreOnly = false
    localFilePattern = "*.{fa,fasta,fna,contigs_velvet.fa}"

    // DWGSIM parameters
    dwgsimErrorRate = 0.0
    dwgsimOuterDistance = 500
    dwgsimStdDev = 50
    dwgsimNumReads = 1000000
    dwgsimReadLength = 150

    // SNIPPY parameters
    snippyCpus = 4

    // Resource parameters
    maxCpus = 6
    maxMemory = '8GB'
    maxTime = '24h'

    // Prokka parameters
    prokka_genus = 'Streptococcus'
    prokka_species = 'pneumoniae'
    prokka_strain = 'SPNEU'

    // Panaroo parameters
    panaroo_clean_mode = 'strict'

    // BLAST parameters
    blast_max_target_seqs = 500
    blast_word_size = 7
    blast_evalue = "1e-10"
    blast_perc_identity = 90
    blast_dust = "no"
    blast_soft_masking = false
    blast_xdrop_ungap = 0
    blast_xdrop_gap = 0
    blast_gapopen = 0
    blast_gapextend = 0

    // Real reads analysis parameters
    runRealReadsAnalysis = true
    useRealReads = true
    genus = 'Streptococcus'
    species = 'pneumoniae'
    strain = 'SPNEU'

    // Acetyltransferase search parameters
    acetyltransferase_search_term = "Streptococcus pneumoniae[Organism] AND ${params.search_term}[Protein] AND gene[Feature Key]"
    acetyltransferase_search_retmax = 500

    // Unicycler parameters
    unicycler_mode = 'bold'
    unicycler_min_fasta_length = 300
    unicycler_kmer_count = 4
    unicycler_min_component_size = 300
    unicycler_min_dead_end_size = 300
    unicycler_min_bridge_qual = 3
    unicycler_keep_temp = false
    unicycler_no_correct = false
    unicycler_verbosity = 2

    // FASTA preprocessing parameters
    fasta_preprocess {
        min_length = 200
        remove_duplicates = true
    }

    // FASTP parameters
    fastp {
        qualified_quality_phred = 15
        unqualified_percent_limit = 40
        cut_mean_quality = 20
        cut_window_size = 4
        cut_front = true
        cut_tail = true
        cut_front_window_size = 1
        cut_front_mean_quality = 20
        cut_tail_window_size = 1
        cut_tail_mean_quality = 20
        length_required = 50
    }

    // Add new parameters
    exTrun = false  // Set this to true when you want to run the truncated gene analysis
    skipUnicycler = false  // Set this to true to skip Unicycler and use input .fa directly

    // Input parameters
    reads = null
    fa = null
    inputfa = params.fa && params.fa != true ? params.fa : "${projectDir}/further_analysis/*.fa"
    inputreads = params.reads && params.reads != true ? params.reads : "${projectDir}/real_reads"

    // ... other parameters ...
}

// Process resource configurations
process {
    executor = 'local'
    
    withLabel: process_low {
        cpus = { check_max( 6 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
    }
    withLabel: process_medium {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }
    }
    withLabel: process_high {
        cpus = { check_max( 10 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 16.h * task.attempt, 'time' ) }
    }
    
    publishDir = [
        path: { "${params.outputDir}/${task.process}/${task.index}" },
        mode: 'copy',
        saveAs: { filename -> filename.replaceAll(/^[^\/]+\//, '') }
    ]
}

profiles {
    PanG_DB {
        process {
            withName: DOWNLOAD_FOLDER {
                container = 'tabath123/download:latest'
                label = 'process_low'
            }
            withName: PROKKA {
                container = 'staphb/prokka:latest'
                label = 'process_high'
            }
            withName: PANAROO_NON_MUTATED {
                container = 'staphb/panaroo:latest'
                label = 'process_high'
            }
            withName: DWGSIM_MUTATED {
                container = 'tabath123/dwgsim:latest'
                label = 'process_high'
            }
            withName: DWGSIM_NON_MUTATED {
                container = 'tabath123/dwgsim:latest'
                label = 'process_high'
            }
            withName: MUTATE_GENES {
                container = 'tabath123/mutation:latest'
                label = 'process_high'
            }
            withName: BLAST_ACETYLTRANSFERASES_NON_MUTATED {
                container = 'tabath123/blast:latest'
                label = 'process_high'
            }
            withName: CREATE_CUSTOM_ACETYLTRANSFERASE_DB {
                container = 'tabath123/blast:latest'
                label = 'process_high'
                containerOptions = "--user root"
            }
            withName: ANALYZE_NON_MUTATED_GENES {
                container = 'tabath123/analysis:latest'
                label = 'process_medium'
            }
            withName: PROCESS_LOCAL_FILES {
                container = 'ubuntu:latest'
                label = 'process_low'
            }
            withName: EXTRACT_ALL_KEYWORD_GENES_NON_MUTATED {
                container = 'tabath123/extraction:latest'
                label = 'process_low'
            }
            withName: ALIGN_KEYWORD_GENES_TO_REFERENCE {
                container = 'ncbi/blast:latest'
                label = 'process_high'
            }
            withName: FASTA_PREPROCESS {
                container = 'staphb/seqkit:latest'
                label = 'process_high'
            }
            withName: COMPARE_BLAST_AND_GENE_INFO {
                container = 'tabath123/extraction_gff'
                label = 'process_medium'
            }
            withName: SEARCH_TRUNCATED_GFF {
                container = 'ubuntu:latest'
                label = 'process_low'
            }
        }
    }
    
    XtraDetect {
        process {
            withName: SNIPPY_REAL_READS {
                container = 'staphb/snippy:latest'
                label = 'process_high'
            }
            withName: EXTRACT_ACETYLTRANSFERASE_GENES_GFF_REAL {
                container = 'tabath123/extraction_gff:latest'
                label = 'process_medium'
            }
            withName: ANALYZE_PREMATURE_STOPS_REAL {
                container = 'tabath123/analysis:latest'
                label = 'process_medium'
            }
            withName: BLAST_ACETYLTRANSFERASES_REAL {
                container = 'tabath123/blast:latest'
                label = 'process_high'
            }
            withName: PROKKA {
                container = 'staphb/prokka:latest'
                label = 'process_high'
            }
            withName: UNICYCLER_ASSEMBLY {
                container = 'staphb/unicycler:latest'
                label = 'process_high'
            }
            withName: FASTP {
                container = 'staphb/fastp:latest'
                label = 'process_high'
            }
            withName: FASTA_PREPROCESS {
                container = 'staphb/seqkit:latest'
                label = 'process_high'
            }
            withName: EXTRACT_KEYWORD_GENES {
                container = 'tabath123/extraction:latest'
                label = 'process_medium'
            }
            withName: APPLY_SNIPPY_CHANGES_REAL {
                container = 'tabath123/extraction:latest'
                label = 'process_medium'
            }
            withName: GATHER_TOP_BLAST_INFO_AND_ANNOTATIONS {
                container = 'tabath123/extraction_gff'
                label = 'process_medium'
            }
            withName: DWGSIM_NON_MUTATED {
                container = 'tabath123/dwgsim:latest'
                label = 'process_high'
            }
        }
    }
}

// Docker configuration
docker {
    enabled = true
    runOptions = '-u $(id -u):$(id -g)'
    temp = 'auto'
    useLocalDockerImage = false
}

// Environment variables
env {
    NCBI_API_KEY = '1e15b2e17f3da7c9f58776ace230c5a0ce09'
}

// Function to check max resource limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.maxMemory as nextflow.util.MemoryUnit) == 1)
                return params.maxMemory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "WARNING: Max memory '${params.maxMemory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.maxTime as nextflow.util.Duration) == 1)
                return params.maxTime as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "WARNING: Max time '${params.maxTime}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.maxCpus as int )
        } catch (all) {
            println "WARNING: Max cpus '${params.maxCpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Reporting
report {
    enabled = true
    file = "${params.outputDir}/pipeline_report.html"
    overwrite = true
}

timeline {
    enabled = true
    file = "${params.outputDir}/pipeline_timeline.html"
    overwrite = true
}

trace {
    enabled = true
    file = "${params.outputDir}/pipeline_trace.txt"
    fields = 'task_id,name,status,exit,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem'
    overwrite = true
}

dag {
    enabled = true
    file = "${params.outputDir}/pipeline_dag.svg"
    overwrite = true
}